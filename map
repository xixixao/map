#!/usr/bin/env node


// Generated by CoffeeScript 1.4.0
var args, command, doesExist, exec, execute, executeList, fs, greeny, isDirectory, mapTo, mapping, numberExecuted, path, util;

fs = require('fs');

path = require('path');

exec = require('child_process').exec;

util = require('util');

args = process.argv;

command = args[args.length - 1];

executeList = [];

if (typeof command !== 'string') {
  return;
}

greeny = function(string) {
  return "\u001b[32m\u001b[1m" + string + "\u001b[39m";
};

mapping = function(filePath) {
  var colorized, fileExt, fileName, mapped;
  mapped = command;
  colorized = command;
  mapped = mapped.replace(/#it/g, filePath);
  colorized = colorized.replace(/#it/g, greeny(filePath));
  fileExt = path.extname(filePath);
  if (fileExt) {
    fileName = filePath.replace(new RegExp("" + fileExt + "$"), '');
    mapped = mapped.replace(/#name/g, fileName).replace(/#ext/g, fileExt);
    colorized = colorized.replace(/#name/g, greeny(fileName)).replace(/#ext/g, greeny(fileExt));
  } else {
    if (mapped.match(/(^|[^\\])#name/)) {
      console.error("#name token used but " + (greeny(filePath)) + " was not found.");
      process.exit(1);
    }
    if (mapped.match(/(^|[^\\])#ext/)) {
      console.error("#ext token used but " + (greeny(filePath)) + " was not found.");
      process.exit(1);
    }
  }
  return [mapped, colorized];
};

doesExist = function(filePath) {
  if (fs.existsSync != null) {
    return fs.existsSync(filePath);
  } else if (path.existsSync != null) {
    return path.existsSync(filePath);
  } else {
    throw "Node.js missing either path or fs existsSync";
  }
};

isDirectory = function(filePath) {
  var fileStats, _ref;
  fileStats = fs.statSync(filePath);
  return fileStats.isDirectory() && ((_ref = filePath[filePath.length - 1]) === '/' || _ref === '\\');
};

mapTo = function(list, inside) {
  var filePath, isFile, _i, _len;
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    filePath = list[_i];
    if (inside != null) {
      filePath = path.join(inside, filePath);
    }
    isFile = doesExist(filePath);
    if (isFile) {
      if (isDirectory(filePath)) {
        mapTo(fs.readdirSync(filePath), filePath);
        continue;
      }
    }
    executeList.push(mapping(filePath));
  }
};

numberExecuted = 0;

execute = function(list) {
  var colorized, mapped, _ref;
  if (list.length === 0) {
    if (numberExecuted > 0) {
      console.log('');
    }
    return;
  }
  if (numberExecuted === 0) {
    console.log('');
  }
  _ref = list.shift(), mapped = _ref[0], colorized = _ref[1];
  console.log(colorized);
  numberExecuted++;
  exec(mapped, function(error, stdout, stderr) {
    if (stdout.length) {
      util.print(stdout);
    }
    if (stderr.length) {
      util.error(stderr.replace(/\n$/, ''));
    }
    return execute(list);
  });
};

mapTo(args.slice(2, -1));

execute(executeList);
